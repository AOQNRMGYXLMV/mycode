#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;

const int maxn = 100000 + 10;
const int maxnode = maxn * 20;

int n;
int a[maxn], b[maxn], tot;

int sz, root[maxn];
int lch[maxnode], rch[maxnode], cnt[maxnode];
LL sum[maxnode];

int update(int pre, int L, int R, int p, LL v) {
	int rt = ++sz;
	sum[rt] = sum[pre] + v;
	cnt[rt] = cnt[pre] + 1;
	if(L < R) {
		int M = (L + R) / 2;
		if(p <= M) {
			rch[rt] = rch[pre];
			lch[rt] = update(lch[pre], L, M, p, v);
		} else {
			lch[rt] = lch[pre];
			rch[rt] = update(rch[pre], M+1, R, p, v);
		}
	}
	return rt;
}

void query(int l, int r, int L, int R, int k, int& q1, LL& q2) {
	if(L == R) {
		q1 = L;
		q2 += (sum[r] - sum[l]) / (cnt[r] - cnt[l]) * k;
		return;
	}
	int M = (L + R) / 2;
	int num = cnt[lch[r]] - cnt[lch[l]];
	if(num >= k) query(lch[l], lch[r], L, M, k, q1, q2);
	else {
		q2 += sum[lch[r]] - sum[lch[l]];
		query(rch[l], rch[r], M+1, R, k - num, q1, q2);
	}
}

int main()
{
	freopen("in.txt", "r", stdin);
	int T; scanf("%d", &T);
	for(int kase = 1; kase <= T; kase++) {
		scanf("%d", &n);
		for(int i = 1; i <= n; i++) {
			scanf("%d", a + i);
			b[i - 1] = a[i];
		}
		sort(b, b + n);
		tot = unique(b, b + n) - b;

		sz = 0;
		for(int i = 1; i <= n; i++) {
			int p = lower_bound(b, b + tot, a[i]) - b + 1;
			root[i] = update(root[i - 1], 1, tot, p, a[i]);
		}

		printf("Case #%d:\n", kase);
		int q; scanf("%d", &q);
		while(q--) {
			int l, r; scanf("%d%d", &l, &r);
			int k = (r - l + 2) / 2;
			int rl = root[l], rr = root[r + 1];
			int q1 = 0;
			LL ql = 0;
			query(rl, rr, 1, tot, k, q1, ql);
			LL mid = b[q1 - 1];
			LL qr = sum[rr] - sum[rl] - ql;
			LL ans = (mid * k - ql) + (qr - mid * (r - l + 1 - k));
			printf("%lld\n", ans);
		}
		printf("\n");
	}

	return 0;
}
